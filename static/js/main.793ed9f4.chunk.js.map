{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clickHandler","loadUser","catch","err","alert","state","isLogin","departmentList","user","word","member","currentPage","totalPage","_this2","httpClient","axios","create","baseURL","withCredentials","loadAuth","then","loadDepartments","Promise","resolve","_this3","get","params","callback","commonResponseHandling","result","is_login","setState","auth_url","window","location","href","_this4","res","console","debug","data","code","error","reject","message","e","_this5","department_id","target","value","page","item_list","summary","total_pages","current_page","log","text","_this6","query","Number","_this7","react","onChange","type","handleChange","onClick","searchUser","className","prevPage","nextPage","map","row","index","key","user_name","src","photo_url","alt","React","Boolean","hostname","match","ReactDOM","render","react_default","a","createElement","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.793ed9f4.chunk.js","sourcesContent":["import * as React from 'react';\nimport axios from 'axios';\nimport './App.css';\n\n\n\nclass App extends React.Component {\n    \n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            isLogin:false,\n            departmentList : [],\n            user:[],\n            // value:'',\n            word: '',\n            member:[],\n            currentPage:'1',\n            totalPage: '',\n        };\n    }\n\n    componentDidMount() {\n        this.httpClient = axios.create({\n            baseURL:'https://kadou.i.nijibox.net/api',\n            withCredentials:true,\n        });\n\n\n        this.loadAuth()\n            .then(()=>{\n                if(! this.state.isLogin){\n                    return Promise.resolve();\n                }\n                return this.loadDepartments();\n            })\n            .catch((err)=>{\n                alert(\"APIがエラーを返しました\\n\\n\" + err);\n            })\n\n        ;\n    }\n    loadAuth(){\n        return this.httpClient.get('/auth' , {params:{callback:'http://localhost:3000'}})\n            .then(this.commonResponseHandling)\n            .then((result)=>{\n                if(result.is_login){\n                    this.setState({isLogin:true});\n                }else if(result.auth_url){\n                    window.location.href = result.auth_url;\n                }\n            });\n    }\n    loadDepartments(){\n        return this.httpClient.get('/who/departments')\n            .then(this.commonResponseHandling)\n            .then((result)=>{\n                this.setState({departmentList : result});\n            })\n    }\n\n    commonResponseHandling(res){\n        console.debug(res);\n        if(res.data.code !== \"200\"){\n            console.error(res.data.data);\n            return Promise.reject(\"API Error:\" + res.data.data.message);\n        }\n        return Promise.resolve(res.data.data);\n    }\n\n    loadUser(e){\n      return this.httpClient.get('/who/search', {params:{department_id: e.target.value , page : this.state.currentPage}})\n        .then(this.commonResponseHandling)\n        .then((result)=>{\n          this.setState({user : result.item_list, totalPage : result.summary.total_pages , page: result.summary.current_page});\n          console.log(result.summary.total_pages);\n          console.log(result.summary.current_page)\n        })\n    }\n\n    handleChange(word){\n      this.setState({word: word});\n    }\n\n    searchUser(text){\n      text = this.state.word;\n      console.log(text);\n      return this.httpClient.get('/who/search', {params:{query: text}})\n          .then(this.commonResponseHandling)\n          .then((result)=>{\n            console.log(result);\n            this.setState({member:result.item_list});\n          })\n    }\n\n    clickHandler = ()=>{\n        this.loadUser()\n            .catch((err)=>{\n                alert('エラー発生');\n            });\n    };\n\n    nextPage(){\n      let currentPage = Number(this.state.currentPage)\n      if(currentPage+1 <= Number(this.state.totalPage)){\n        currentPage +=1 ;\n      }\n      \n      this.setState({\n        currentPage: currentPage\n      })\n    }\n\n    prevPage(){\n      let currentPage = Number(this.state.currentPage)\n      if(currentPage+1 >= Number(this.state.totalPage)){\n        currentPage -=1 ;\n      }\n      \n      this.setState({\n        currentPage: currentPage\n      })\n    }\n\n\n    render() {\n      // let totalPage =  Number(this.state.totalPage);\n      //   if(totalPage >=2){\n      //     return (\n      //       <div className=\"pager\">\n      //             <div onClick={e => this.prevPage(e)} className=\"prev\">前へ</div>\n      //             <div onClick={e => this.nextPage(e)} className=\"next\">次へ</div>\n      //           </div>\n      //     );\n      //   }\n      \n      return (\n          <div>\n\n              <form>\n                <label>\n                  部署を選択してください \n                  <select onChange={e => this.loadUser(e)}>\n                  <option value='0'>選択してください</option>\n                  <option value='2'>MP事業部</option>\n                  <option value='3'>OS事業部</option>\n                  <option value='8'>UI/UX制作室</option>\n                  <option value='4'>開発室</option>\n                  <option value='5'>クリエイティブ室</option>\n                  <option value='6'>QAグループ</option>\n                  <option value='7'>経営企画室</option>\n                  <option value='1'>ニジボックス</option>\n                  </select>\n                </label>\n              </form>\n\n              <input type=\"text\" value={this.state.word} onChange={e => this.handleChange(e.target.value)}/>\n              <button onClick={e => this.searchUser(e)}>検索</button>\n\n              <div className=\"pager\">\n                <div onClick={e => this.prevPage(e)} className=\"prev\">前へ</div>\n                <div onClick={e => this.nextPage(e)} className=\"next\">次へ</div>\n              </div>\n\n              <div className='members'>\n                {this.state.member.map((row,index)=>{\n                  return <div className='members_card' key={index}>\n                  {/* <p className='members_num'>User_id:{row.user_id}</p> */}\n                  <p className='members_name'>氏名:{row.user_name}</p>\n                  <img src={row.photo_url} alt='' />\n                  </div>;\n                })}\n\n\n              </div>\n\n              <div className='members'>\n                {this.state.user.map((row,index)=>{\n                  return <div className='members_card' key={index}>\n                  <p className='members_name'>氏名:{row.user_name}</p>\n                  <img src={row.photo_url} alt='' />\n                  </div>;\n                })}\n              </div>\n\n          </div>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}