{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clickHandler","loadUser","catch","err","alert","state","isLogin","departmentList","departmentId","userList","totalPage","currentPage","word","_this2","httpClient","axios","create","baseURL","withCredentials","loadAuth","then","loadDepartments","Promise","resolve","_this3","get","params","callback","commonResponseHandling","result","is_login","setState","auth_url","window","location","href","_this4","res","console","debug","data","code","error","reject","message","e","_this5","department_id","target","value","page","getAttribute","query","item_list","summary","total_pages","current_page","_this6","memberList","map","row","index","react","className","key","user_name","src","photo_url","alt","totalPages","onChange","type","handleChange","onClick","data-page","React","Boolean","hostname","match","ReactDOM","render","react_default","a","createElement","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f137684b.chunk.js","sourcesContent":["import * as React from 'react';\nimport axios from 'axios';\nimport './App.css';\n\n\n\nclass App extends React.Component {\n    \n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            isLogin:false,\n            departmentList : [],\n            departmentId: '',\n            userList:[],\n            totalPage: '',\n            currentPage: '',\n            word: '',\n        };\n    }\n\n    componentDidMount() {\n        this.httpClient = axios.create({\n            baseURL:'https://kadou.i.nijibox.net/api',\n            withCredentials:true,\n        });\n\n\n        this.loadAuth()\n            .then(()=>{\n                if(! this.state.isLogin){\n                    return Promise.resolve();\n                }\n                return this.loadDepartments();\n            })\n            .catch((err)=>{\n                alert(\"APIがエラーを返しました\\n\\n\" + err);\n            })\n\n        ;\n    }\n    loadAuth(){\n        return this.httpClient.get('/auth' , {params:{callback:'http://localhost:3000'}})\n            .then(this.commonResponseHandling)\n            .then((result)=>{\n                if(result.is_login){\n                    this.setState({isLogin:true});\n                }else if(result.auth_url){\n                    window.location.href = result.auth_url;\n                }\n            });\n    }\n    loadDepartments(){\n        return this.httpClient.get('/who/departments')\n            .then(this.commonResponseHandling)\n            .then((result)=>{\n                this.setState({departmentList : result});\n            })\n    }\n\n    commonResponseHandling(res){\n        console.debug(res);\n        if(res.data.code !== \"200\"){\n            console.error(res.data.data);\n            return Promise.reject(\"API Error:\" + res.data.data.message);\n        }\n        return Promise.resolve(res.data.data);\n    }\n\n\n\n    loadUser(e){\n      const params = {\n        department_id: e.target.value || this.state.departmentId,\n        page: e.target.getAttribute('data-page') || 1,\n        query: this.state.word,\n      };\n      return this.httpClient.get('/who/search', {params:params})\n          .then(this.commonResponseHandling)\n          .then((result)=>{\n            this.setState({\n              departmentId: params.department_id,\n              userList : result.item_list,\n              totalPage : result.summary.total_pages,\n              currentPage: result.summary.current_page,\n            });\n          })\n    }\n\n    handleChange(word){\n      this.setState({word: word});\n    }\n\n    \n\n    clickHandler = ()=>{\n        this.loadUser()\n            .catch((err)=>{\n                alert('エラー発生');\n            });\n    };\n\n\n\n\n    render() {\n      const memberList = this.state.userList.map((row,index)=>{\n        return <div className='members_card' key={index}>\n        <p className='members_name'>{row.user_name}</p>\n        <img src={row.photo_url} alt={row.user_name} />\n        </div>;\n      })\n\n      let totalPages = this.state.totalPage;\n      let currentPage = this.state.currentPage;\n\n\n      return (\n          <div>\n              <form>\n                <label>\n                  部署を選択してください \n                  <select onChange={e => this.loadUser(e)}>\n                    <option value='0'>選択してください</option>\n                    <option value='2'>MP事業部</option>\n                    <option value='3'>OS事業部</option>\n                    <option value='8'>UI/UX制作室</option>\n                    <option value='4'>開発室</option>\n                    <option value='5'>クリエイティブ室</option>\n                    <option value='6'>QAグループ</option>\n                    <option value='7'>経営企画室</option>\n                    <option value='1'>ニジボックス</option>\n                  </select>\n                </label>\n              </form>\n\n              <input type=\"text\" value={this.state.word} onChange={e => this.handleChange(e.target.value)}/>\n              <button onClick={e => this.loadUser(e)}>検索</button>\n\n              <div className='members'>\n                {memberList}\n                <div className=\"pager\">\n                  <button type=\"button\" className=\"\" onClick={e => this.loadUser(e)} data-page={this.state.currentPage - 1} > 前へ</button>\n                  <div className=\"pager__page\">{currentPage}/{totalPages}ページ</div>\n                  <button type=\"button\" className=\"\" onClick={e => this.loadUser(e)} data-page={this.state.currentPage + 1} >次へ</button>\n                </div>\n\n              </div>\n          </div>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}